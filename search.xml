<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="/blog/article/afb0fd43.html"/>
      <url>/blog/article/afb0fd43.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>此笔记转载于 👉<a href="https://melodyhub.ltd/blog/2020/10/04/Vue%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"> 此处 </a></p></blockquote><p>Vue 的<code>核心库只关注视图层</code>，方便与第三方库或既有项目整合。</p><p>HTML + CSS + JS : 视图 ： <code>给用户看，刷新后台给的数据</code></p><p>网络通信 ： <code>axios</code></p><p>页面跳转 ： <code>vue-router</code></p><p>状态管理：<code>vuex</code></p><p>Vue-UI : <code>ICE</code>、 <code>Element UI</code></p><h1 id="一、VUE-概述"><a href="#一、VUE-概述" class="headerlink" title="一、VUE 概述"></a>一、VUE 概述</h1><p><code>Vue</code>(读音<code>/vju/</code>, 类似于 view)是<strong>一套用于构建用户界面的渐进式框架</strong>，发布于 2014 年 2 月。</p><p>与其它大型框架不同的是，<strong>Vue 被设计为可以自底向上逐层应用</strong>。</p><p><strong>Vue 的核心库只关注视图层</strong>，不仅易于上手，还便于与第三方库(如: <code>vue-router</code>: 跳转，<code>vue-resource</code>: 通信，<code>vuex</code>:管理)或既有项目整合。</p><hr><h1 id="二、前端核心知识分析"><a href="#二、前端核心知识分析" class="headerlink" title="二、前端核心知识分析"></a>二、前端核心知识分析</h1><h2 id="1-前端三要素"><a href="#1-前端三要素" class="headerlink" title="1. 前端三要素"></a>1. 前端三要素</h2><p><code>HTML</code><strong>(结构层)</strong> : 超文本标记语言(Hyper Text Markup Language) ，决定网页的结构和内容<br><code>CSS</code><strong>(表现层)</strong> : 层叠样式表(Cascading Style sheets) ，设定网页的表现样式<br><code>JavaScript</code><strong>(行为层)</strong> : 是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行,用于控制网页的行为</p><h3 id="1-1-CSS-预处理器有"><a href="#1-1-CSS-预处理器有" class="headerlink" title="1.1 CSS 预处理器有"></a>1.1 CSS 预处理器有</h3><p><code>SASS</code>：基于 Ruby，通过服务端处理，功能强大。解析效率稿。需要学习 Ruby 语言，上手难度高于 LESS。<br><code>LESS</code>：基于 NodeJS，通过客户端处理，使用简单。功能比 SASS 简单，解析效率也低于 SASS，<strong>但在实际开发中足够了，所以后台人员如果需要的话，建议使用 LESS</strong>。</p><h3 id="1-2-Native-原生-JS-开发"><a href="#1-2-Native-原生-JS-开发" class="headerlink" title="1.2 Native 原生 JS 开发"></a>1.2 Native 原生 JS 开发</h3><p>原生 JS 开发，也就是让我们按照<strong>ECMAScript</strong>标准的开发方式，简称是 ES,特点是所有浏览器都支持。截止到当前博客发布时间，ES 标准已发布如下版本:</p><p>ES3</p><p>ES4 (内部,未正式发布)</p><p><code>ES5 (全浏览器支持)</code></p><p><code>ES6 (常用，当前主流版本: webpack打包成为ES5支持! )</code></p><p>ES7</p><p>ES8</p><p>ES9 (草案阶段)</p><blockquote><p>区别就是逐步增加新特性。</p></blockquote><h3 id="1-3-TypeScript-微软的标准"><a href="#1-3-TypeScript-微软的标准" class="headerlink" title="1.3 TypeScript 微软的标准"></a>1.3 TypeScript 微软的标准</h3><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯海尔斯伯格（C#、Delphi、TypeScript 之父； .NET 创立者）主导。</p><p>该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS ）才能被浏览器正确执行。</p><h2 id="2-JavaScript-框架"><a href="#2-JavaScript-框架" class="headerlink" title="2. JavaScript 框架"></a>2. JavaScript 框架</h2><p>前端三大框架：<code>Angular</code>、<code>React</code>、<code>Vue</code></p><p><strong>jQuery</strong>: 大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，缺点是 DOM 操作太频繁,影响前端性能;在前端眼里使用它仅仅是为了兼容 IE6、7、8。<br><strong>Angular</strong>: Google 收购的前端框架，由一群 Java 程序员开发，其<code>特点是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念</code>，与微软合作，采用 TypeScript 语法开发;对后台程序员友好，对前端程序员不太友好;最大的缺点是版本迭代不合理(如: 1 代-&gt; 2 代，除了名字，基本就是两个东西;截止发表博客时已推出了 Angular6)。<br><strong>React</strong>: Facebook 出品，一款高性能的 JS 前端框架;<code>特点是提出了新概念[虚拟 DOM]用于减少真实 DOM 操作，在内存中模拟 DOM 操作，有效的提升了前端渲染效率</code>;缺点是使用复杂，因为需要额外学习一门[JSX] 语言。<br><strong>Vue</strong>:一款渐进式 JavaScript 框架，<strong>所谓渐进式就是逐步实现新特性的意思</strong>，如实现模块化开发、路由、状态管理等新特性。<strong>其特点是综合了 Angular (模块化)和 React (虚拟 DOM)的优点</strong>。<br><strong>Axios</strong> :<strong>前端通信框架</strong>；因为 Vue 的边界很明确，就是为了处理 DOM，所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以直接选择使用 jQuery 提供的 AJAX 通信功能。</p><h2 id="3-UI-框架"><a href="#3-UI-框架" class="headerlink" title="3. UI 框架"></a>3. UI 框架</h2><p>Ant-Design：阿里巴巴出品，基于 React 的 UI 框架<br><strong>ElementUI、 iview、 ice</strong>: 基于 Vue 的 UI 框架<br><strong>Bootstrap</strong>：Twitter 推出的一个用于前端开发<br>AmazeUI：又叫”妹子 UI”，一款 HTML5 跨屏前端框架</p><h2 id="4-JavaScript-构建工具"><a href="#4-JavaScript-构建工具" class="headerlink" title="4. JavaScript 构建工具"></a>4. JavaScript 构建工具</h2><p>Babel: JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript<br><strong>WebPack</strong>: 模块打包器，主要作用是打包、压缩、合并及按序加载</p><blockquote><p>前端开发主要使用<code>WebPack</code>。</p></blockquote><h2 id="5-三端合一"><a href="#5-三端合一" class="headerlink" title="5. 三端合一"></a>5. 三端合一</h2><h3 id="5-1-混合开发（Hybid-App）"><a href="#5-1-混合开发（Hybid-App）" class="headerlink" title="5.1 混合开发（Hybid App）"></a>5.1 混合开发（Hybid App）</h3><p>主要目的是实现一套代码三端统一(PC、Android:.apk、iOS:.ipa )并能备够调用到底层件(如:传感器、GPS、 摄像头等)，打包方式主要有以下两种:</p><blockquote><p>云打包: <strong>HBuild</strong> -&gt; <strong>HBuildX</strong>， <strong>DCloud 出品</strong>; <strong>API Cloud</strong><br>本地打包: <strong>Cordova</strong> (前身是 PhoneGap)</p></blockquote><h3 id="5-2-微信小程序"><a href="#5-2-微信小程序" class="headerlink" title="5.2 微信小程序"></a>5.2 微信小程序</h3><p>详见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信小程序官网</a>，这里就只介绍一个方便小程序开发的框架：</p><blockquote><p>WeUI</p></blockquote><h2 id="6-后端技术"><a href="#6-后端技术" class="headerlink" title="6. 后端技术"></a>6. 后端技术</h2><p>前端人员为了方便开发也需要掌握一定的后端技术， 但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了<code>NodeJS</code>这样的技术。</p><p>NodeJS 的作者已经声称放弃 NodeJS (说是架构做的不好再加上笨重的 node_ modules，可能让作者不爽了吧)，开始开发全新架构的 Deno</p><p>既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下:</p><p>Express: <code>NodeJS</code> 框架<br>Koa: Express 简化版<br><code>NPM</code>: 项目综合管理工具，类似于 Maven<br><code>YARN</code>: NPM 的替代方案，类似于 Maven 和 Gradle 的关系</p><h2 id="7-主流前端框架"><a href="#7-主流前端框架" class="headerlink" title="7. 主流前端框架"></a>7. 主流前端框架</h2><p><strong>Vue.js</strong></p><h3 id="7-1-iView"><a href="#7-1-iView" class="headerlink" title="7.1 iView"></a>7.1 iView</h3><p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富友好的 API，自由灵活地使用空间。</p><p><a href="https://iviewui.com/">官网地址</a><br><a href="https://github.com/view-design/ViewUI">Github</a><br><a href="https://gitee.com/icarusion/iview-admin">iview-admin</a></p><blockquote><p>备注：属于前端主流框架，选型时可以考虑使用，主要特点是移动端支持较多</p></blockquote><h3 id="7-2-ElementUI"><a href="#7-2-ElementUI" class="headerlink" title="7.2 ElementUI"></a>7.2 ElementUI</h3><p><code>Element</code> 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。<strong>主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。</strong></p><p><a href="https://element.eleme.cn/#/zh-CN">官网地址</a><br>Github：<a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a></p><blockquote><p>备注：属于前端主流框架，选型时可以考虑使用，<strong>主要特点是桌面端支持较多</strong></p></blockquote><h3 id="7-3-ICE"><a href="#7-3-ICE" class="headerlink" title="7.3 ICE"></a>7.3 ICE</h3><p>飞冰 是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。</p><blockquote><p>备注:主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段</p></blockquote><h3 id="7-4-VantUI"><a href="#7-4-VantUI" class="headerlink" title="7.4 VantUI"></a>7.4 VantUI</h3><p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库,提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面， 提升开发效率。</p><h3 id="7-5-AtUI"><a href="#7-5-AtUI" class="headerlink" title="7.5 AtUI"></a>7.5 AtUI</h3><p>at-ui 是一款基于 Vue 2.x 的前端 UI 组件库,主要用于快速开发 PC 网站产品。它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。</p><h3 id="7-6-CubeUI"><a href="#7-6-CubeUI" class="headerlink" title="7.6 CubeUI"></a>7.6 CubeUI</h3><p>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p><h3 id="混合开发"><a href="#混合开发" class="headerlink" title="混合开发"></a>混合开发</h3><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><p>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOs.上高质量的原生级应用。Flutter 可与现有代码一起工作,它被世界各地的开发者和组织使用,并且 Flutter 是免费和开源的。</p><blockquote><p>备注: Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架</p></blockquote><h4 id="lonic"><a href="#lonic" class="headerlink" title="lonic"></a>lonic</h4><p>lonic 既是一个 CSS 框架也是一个 Javascript UI 库，lonic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。</p><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><h4 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h4><p>mpvue 是美团开发的一一个使用 <code>Vue.js</code> 开发小程序的前端框架，目前支持微信小程序、百度智能小程序，头条小程序和支付宝小程序。框架基于 <code>Vue.js</code> ，修改了的运行时框架 <code>runt ime</code> 和代码编译器 <code>compiler</code> 实现，使其可运行在小程序环境中，从而为小程序开发引入了 <code>Vue.js</code> 开发体验。</p><blockquote><p>备注:完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</p></blockquote><h4 id="WeUl"><a href="#WeUl" class="headerlink" title="WeUl"></a>WeUl</h4><p>WeUI 是一套同微信原生视觉体验一致的基础样式库， 由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、 dialog、toast、article、 icon 等各式元素。</p><h1 id="三、了解前后端分离的演变史"><a href="#三、了解前后端分离的演变史" class="headerlink" title="三、了解前后端分离的演变史"></a>三、了解前后端分离的演变史</h1><h2 id="1-后端为主的-MVC-时代"><a href="#1-后端为主的-MVC-时代" class="headerlink" title="1 后端为主的 MVC 时代"></a>1 后端为主的 MVC 时代</h2><p>为了降低开发的复杂度，以后端为出发点,比如：Struts、 SpringMVC 等框架的使用，就是后端的 MVC 时代；</p><p>以 <code>Spring MVC</code> 的流程为例：</p><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/01.png' /><p>发起请求到前端控制器( <code>DispatcherServlet</code> )<br>前端控制器请求 <code>HandlerMapping</code> 查找 <code>Handler</code>, 可以根据 <code>xml</code> 配置、注解进行查找<br>处理器映射器 <code>HandlerMapping</code> 向前端控制器返回 <code>Handler</code><br>前端控制器调用处理器适配器去执行 <code>Handler</code><br>处理器适配器去执行 <code>Handler</code><br><code>Handler</code> 执行完成给适配器返回 <code>ModelAndView</code><br>处理器适配器向前端控制器返回 <code>ModelAndView</code> ，<code>Mode lAndView</code> 是 <code>SpringMVC</code> 框架的一一个底层对象，包括 <code>Model</code> 和 <code>View</code><br>前端控制器请求视图解析器去进行视图解析，根据逻辑视图名解析成真正的视图( <code>JSP</code> )<br>视图解析器向前端控制器返回 <code>View</code><br>前端控制器进行视图渲染，视图渲染将模型数据（在 <code>ModelAndView</code> 对象中）填充到 <code>request</code> 域<br>前端控制器向用户响应结果</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>MVC 是一个非常好的协作模式，能够有效降低代码的耦合度,从架构上能够让开发者明白代码应该写在哪里。<br>为了让 View 更纯粹,还可以使用 Thymeleaf、Freemarker 等模板引擎，使模板里无法写入 Java 代码,让前后端分工更加清晰。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>前端开发重度依赖开发环境，开发效率低，这种架构下，前后端协作有两种模式：</p><ul><li><p>第一种是前端写 DEMO，写好后，让后端去套模板。好处是 DEMO 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大；</p></li><li><p>另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。</p></li></ul></li></ul><ul><li>前后端职责纠缠不清：模板弓|擎功能强大，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 <code>Controller</code> ，页面路由等功能本应该是前端最关注的，但却是由后端来实现。<code>Controller</code> 本身与 <code>Model</code> 往往也会纠缠不清，看了让人咬牙的业务代码经常会出现在 <code>Controller</code> 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。</li><li>对前端发挥的局限性：性能优化如果只在前端做空间非常有限，于是我们经常需要后端合作，但由于后端框架限制，我们很难使用 <strong>【Comet】</strong> 、<strong>【BigPipe】</strong> 等技术方案来优化性能。</li></ul><blockquote><p>注：在这期间（2005 年以前），包括早期的 JSP、PHP 可以称之为 Web 1.0 时代。因为时代在变、技术在变、什么都在变。</p><blockquote><p>世界著名作家、大思想家斯宾塞·约翰逊的一句话：唯一不变的是变化本身。</p></blockquote><p>一些陈旧的技术对于市场来说早就过时了，比如 JSP。</p></blockquote><h2 id="2-基于-AJAX-带来的-SPA-时代"><a href="#2-基于-AJAX-带来的-SPA-时代" class="headerlink" title="2 基于 AJAX 带来的 SPA 时代"></a>2 基于 AJAX 带来的 SPA 时代</h2><p>时间回到 2005 年 <code>AJAX</code> （Asynchronous JavaScript And XM，异步 JavaScript 和 XML,老技术新用法）被正式提出并开始使用 <code>CDN</code> 作为静态资源存储，于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA （Single Page Application）单页面应用时代。</p><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/02.png' /><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>这种模式下，<strong>前后端的分工非常清晰，前后端的关键协作点是 AJAX 接口</strong>。看起来是如此美妙,但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，<strong>这个时代开始出现浏览器端的分层架构</strong>：</p><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/03.png' /><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li><strong>前后端接口的约定</strong>：如果后端的接口一塌糊涂,如果后端的业务模型不够稳定,那么前端开发会很痛苦；不少团队也有类似尝试，通过接口规则、接口平台等方式来做。<strong>有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发</strong>。</li><li><strong>前端开发的复杂度控制</strong>：SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。</li></ul><h2 id="3-前端为主的-MV-时代"><a href="#3-前端为主的-MV-时代" class="headerlink" title="3 前端为主的 MV* 时代"></a>3 前端为主的 MV* 时代</h2><p>此处的 MV* 模式如下：</p><p>MVC （同步通信为主）：Model、View、Controller<br>MVP （异步通信为主）： Model、 View、 Presenter<br>MVVM （异步通信为主）：Model、 View、 ViewModel<br>为了降低前端开发复杂度，涌现了大量的前端框架，比如：<code>AngularJS</code>、 <code>React</code> 、<code>Vue.js</code> 、<code>EmberJS</code>等，这些框架总的原则是先按类型分层,比如 Templates、Controllers、 Models, 然后再在层内做切分，如下图：<br><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/04.png' /></p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li><strong>前后端职责很清晰：</strong>前端工作在浏览器端，后端工作在服务器端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful 等接口。</li></ul><ul><li><strong>前端开发的复杂度可控：</strong>前端代码很重，但合理分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计都有很大学位，得花一本书的厚度去说明。</li><li><strong>部署相对独立：</strong>可以快速改进产品的体验。</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li><li>全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。</li><li>性能并非最佳，特别是移动互联网环境下。</li><li>SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌握。</li></ul><h2 id="4-NodeJS-代理的全栈时代"><a href="#4-NodeJS-代理的全栈时代" class="headerlink" title="4 NodeJS 代理的全栈时代"></a>4 NodeJS 代理的全栈时代</h2><p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起， JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：<br><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/05.png' /><br>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p><ul><li>Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互 功能，HTML 的生成也可以放在这层,具体看应用场景。</li><li>Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由,前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。</li></ul><p>通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。</p><p>与 JSP 模式相比,全栈模式看起来是一种回归，也的确是-种向原始开发模式的回归,不过是一种螺旋上升式的回归。</p><p>基于 NodeJS 的全栈模式，依旧面临很多挑战:</p><ul><li>需要前端对服务端编程有更进一 步的认识。比如 TCP/IP 等网络知识的掌握。</li><li>NodeJS 层与 Java 层的高效通信。NodeJS 模式下，都在服务器端，RESTful HTTP 通信未必高效,通过 SOAP 等方式通信更高效。-切需要在验证中前行。</li><li>对部署、运维层面的熟练了解，需要更多知识点和实操经验。</li><li>大量历史遗留问题如何过渡。这可能是最大最大的阻力。</li></ul><blockquote><p>注：为什么说:” 前端想学后台很难，而我们后端程序员学任何东西都很简单“；就是因为后端程序员具备相对完善的知识体系。</p></blockquote><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>综上所述，模式也好，技术也罢，没有好坏优劣之分，只有适合不适合；前后分离的开发思想主要是基于 <code>SoC（关注度分离原则）</code>，上面种种模式，都是让前后端的职责更清晰，分工更合理高效。</p><h1 id="四、MVVM-模式"><a href="#四、MVVM-模式" class="headerlink" title="四、MVVM 模式"></a>四、MVVM 模式</h1><h2 id="1-回顾-MVC"><a href="#1-回顾-MVC" class="headerlink" title="1 回顾 MVC"></a>1 回顾 MVC</h2><p>MVC 模式代表<code>Model-View-Controller（模型-视图-控制器）</code>模式。</p><p>这种模式用于<strong>应用程序的分层开发</strong>。</p><ul><li><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li><li><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</li><li><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li></ul><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/06.png' /><h2 id="2-什么是-MVVM？"><a href="#2-什么是-MVVM？" class="headerlink" title="2 什么是 MVVM？"></a>2 什么是 MVVM？</h2><blockquote><p><code>MVVM (Model-View-ViewModel) 是一种软件架构设计模式</code>，由微软 WPF (用于替代 WinForm，以前就是用这个技术开发桌面应用程序的)和 Silverlight (类似于 Java Applet,简单点说就是在浏览器上运行的 WPF)的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由 John Gossman (同样也是 WPF 和 Silverlight 的架构师)于 2005 年在他的博客上发表。</p></blockquote><p><code>MVVM</code> 源自于经典的<code>MVC (ModI-View-Controller) 模式</code>。</p><p>MVVM 的核心是<code>ViewModel</code>层，<strong>负责转换 Model 中的数据对象来让数据变得更容易管理和使用</strong>，其作用如下:</p><ul><li>该层向上与 <code>View</code> 层进行双向数据绑定</li><li>向下与 <code>Model</code> 层通过接口请求进行数据交互</li></ul><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/07.png' /><h2 id="3-MVVM-组成部分"><a href="#3-MVVM-组成部分" class="headerlink" title="3 MVVM 组成部分"></a>3 MVVM 组成部分</h2><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/08.png' /><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>View 是视图层，也就是用户界面。</p><p>前端主要由 <code>HTML</code> 和 <code>CSS</code> 来构建，为了更方便地展现 <code>ViewModel</code> 或者 <code>Model</code> 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。</p><p>这里的难点主要在于需要和前端约定统一的 <code>接口规则</code>。</p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p><p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的</p><ul><li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）</li><li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）<br>视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。</li></ul><blockquote><p>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。</p></blockquote><blockquote><p>View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就<strong>完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环</strong>。</p></blockquote><h2 id="4-为什么要使用-MVVM"><a href="#4-为什么要使用-MVVM" class="headerlink" title="4 为什么要使用 MVVM"></a>4 为什么要使用 MVVM</h2><p>MVVM 模式和 MVC 模式一样，主要目的是<code>分离视图（View）和模型（Model）</code>，有几大好处</p><ul><li><strong>低耦合：</strong> 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li><li><strong>可复用：</strong> 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li><li><strong>独立开发：</strong> 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li><li><strong>可测试：</strong> 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li></ul><h2 id="5-MVVM-框架"><a href="#5-MVVM-框架" class="headerlink" title="5 MVVM 框架"></a>5 MVVM 框架</h2><p>当下流行的 MVVM 框架有:</p><p><code>Vue</code><br><code>Angular</code><br><code>React</code><br>……</p><h1 id="五、Vue-是-MVVM-模式的实现者"><a href="#五、Vue-是-MVVM-模式的实现者" class="headerlink" title="五、Vue 是 MVVM 模式的实现者"></a>五、Vue 是 MVVM 模式的实现者</h1><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/09.png' /><ul><li><code>Model</code> : 模型层，在这里表示 JavaScript 对象</li><li><code>View</code> : 视图层,在这里表示 DOM (HTML 操作的元素)</li><li><code>ViewModel</code> : 连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者在 MVVM 架构中，是不允许数据和视图直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者<ul><li><code>ViewModel</code> 能够观察到数据的变化，并对视图对应的内容进行更新</li><li><code>ViewModel</code> 能够监听到视图的变化，并能够通知数据发生改变</li></ul></li></ul><blockquote><p>Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听与数据绑定。</p></blockquote><h1 id="六、为什么要使用-Vue-js"><a href="#六、为什么要使用-Vue-js" class="headerlink" title="六、为什么要使用 Vue.js"></a>六、为什么要使用 Vue.js</h1><ul><li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20 多 kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li><li>移动优先。更适合移动端，比如移动端的 Touch 事件<br>易上手，学习曲线平稳，文档齐全</li><li>吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li><li>开源，社区活跃度高<br>…</li></ul><h1 id="七、第一个-Vue-程序"><a href="#七、第一个-Vue-程序" class="headerlink" title="七、第一个 Vue 程序"></a>七、第一个 Vue 程序</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h2><p>IDEA 可以安装 Vue 的插件！</p><blockquote><p>注意：Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。</p></blockquote><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2 下载"></a>2 下载</h2><ul><li><p>开发版本</p><ul><li>包含完整的警告和调试模式：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></li><li>删除了警告，30.96KB min + gzip：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></li></ul></li><li><p>CDN</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-实例-demo"><a href="#3-实例-demo" class="headerlink" title="3 实例 demo"></a>3 实例 demo</h2><p>Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 <strong>DOM 监听与数据绑定</strong>。</p><ol><li><p>新建一个 HTML 文件</p></li><li><p>导入 Vue.js</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个 Yue 对象实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="comment">// Model: 数据</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&quot;Hello, Vue!&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>el:&quot;#app&quot;</code>：绑定元素的 ID<br><code>data:&#123;message: &quot;Hello,Vue!&quot;&#125;</code>：数据对象中有一个名为 message 的属性，并设置了初始值”Hello,Vue!” 4. 将实例绑定到页面元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt; &#123;&#123; message &#125;&#125; &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>只需要在绑定的元素中使用 <code>双&#123;&#125;</code> 将 <code>Vue</code> 创建的名为 <code>message</code> 属性包裹起来，即可实现数据绑定功能，也就实现了 ViewModel 层所需的效果，是不是和 EL 表达式非常像？</p><ol start="5"><li>完整代码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- view层 模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//viewModel 实现与Model双向绑定，动态更新视图数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;Hello, Vue!&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>viewModel 双向绑定</li></ol><p>为了能够更直观的体验 Vue 带来的双向绑定，可以直接在浏览器控制台演示一下：</p><img src= "/blog/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/article/afb0fd43/10.png' /><blockquote><p>此时就可以在控制台直接输入 <code>vm.message</code> 来修改值，中间是可以省略 <code>data</code> 的，在这个操作中，并没有主动操作 <code>DOM</code>，就让页面的内容发生了变化，这就是借助了 <code>Vue</code> 的 数据绑定 功能实现的。<br><code>MVVM</code> 模式中要求 <code>ViewModel</code> 层就是使用 <code>观察者模式</code> 来实现数据的监听与绑定，以做到数据与视图的快速响应。</p></blockquote><h1 id="八、基础语法-amp-用法"><a href="#八、基础语法-amp-用法" class="headerlink" title="八、基础语法 &amp; 用法"></a>八、基础语法 &amp; 用法</h1><ul><li><p>现在数据和 DOM 已经被建立了关联，所有的东西都是响应式的。</p></li><li><p>我们在控制台操作对象的属性，界面可以实时更新。</p></li></ul><h2 id="1-v-bind-绑定数据和元素属性"><a href="#1-v-bind-绑定数据和元素属性" class="headerlink" title="1. v-bind 绑定数据和元素属性"></a>1. v-bind 绑定数据和元素属性</h2><p>我们可以使用<code>v-bind</code>来 绑定数据和元素属性！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- view层 模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//viewModel 实现与Model双向绑定，动态更新视图数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;Hello, Vue!&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.message = <span class="string">&#x27;wonderful U&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-v-if-amp-v-else-条件渲染"><a href="#2-v-if-amp-v-else-条件渲染" class="headerlink" title="2. v-if &amp; v-else 条件渲染"></a>2. v-if &amp; v-else 条件渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    9</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- view层 模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">        &lt;h1 v-else=&gt;No&lt;/h1&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type==&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type==&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type==&#x27;D&#x27;&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//viewModel 实现与Model双向绑定，动态更新视图数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// ok: true,</span></span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;A&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.type = <span class="number">1</span></span><br><span class="line">vm.type = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">vm.type = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">vm.type = <span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-v-for-列表渲染"><a href="#3-v-for-列表渲染" class="headerlink" title="3. v-for 列表渲染"></a>3. v-for 列表渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- view层 模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- v-for=&quot;数组元素 in 源数据数组&quot; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过遍历变量来访问 --&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125; - &#123;&#123;index&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//viewModel 实现与Model双向绑定，动态更新视图数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          items: [&#123; <span class="attr">message</span>: <span class="string">&#x27;Melody&#x27;</span> &#125;, &#123; <span class="attr">message</span>: <span class="string">&#x27;Jerry&#x27;</span> &#125;],</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p></blockquote><h2 id="4-v-on-绑定事件"><a href="#4-v-on-绑定事件" class="headerlink" title="4. v-on 绑定事件"></a>4. v-on 绑定事件</h2><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- view层 模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123;counter&#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//viewModel 实现与Model双向绑定，动态更新视图数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">          counter: 0,</span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;你点我干啥呢？我叫你点，你就点啊？&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//方法必须定义在Vue的methods对象中, v-on绑定事件</span></span></span><br><span class="line"><span class="javascript">          sayHi: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这个this指的是当前的Vue实例对象</span></span></span><br><span class="line"><span class="javascript">            ;(<span class="built_in">this</span>.counter += <span class="number">1</span>), alert(<span class="built_in">this</span>.message)</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件有 <code>Vue</code> 的事件、和前端页面本身的一些事件！<br>这里的 <code>click</code> 是 vue 的事件，可以绑定到 Vue 中的 <code>methods</code> 中的方法事件！<br><a href="https://cn.vuejs.org/v2/guide/events.html">https://cn.vuejs.org/v2/guide/events.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly主题安装音乐播放器插件</title>
      <link href="/blog/article/76c6d058.html"/>
      <url>/blog/article/76c6d058.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给自己的 blog 整个音乐播放器插件</p><div class="note info">            <p>使用 Aplayer 音乐播放器：<a href='https://aplayer.js.org/#//' target = 'blank'>官网链接</a></p>          </div><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>打开 blog 根目录下的<code>themes\Butterfly\layout\includes\head.pug</code></li><li>在<code>head.pug</code>文件内容的尾部添加<code>include ./third-party/aplayer.pug</code></li><li>blog 根目录下的<code>themes\Butterfly\layout\includes\third-party</code>文件夹内新建<code>aplayer.pug</code>内容如图下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if theme.aplayer &amp;&amp; theme.aplayer.enable</span><br><span class="line">    .aplayer(data-id&#x3D;theme.aplayer.id data-server&#x3D;theme.aplayer.server data-type&#x3D;theme.aplayer.type data-fixed&#x3D;theme.aplayer.fixed data-mini&#x3D;theme.aplayer.mini data-listFolded&#x3D;theme.aplayer.listFolded data-order&#x3D;theme.aplayer.order data-preload&#x3D;theme.aplayer.preload)</span><br><span class="line">    each item in theme.aplayer.css</span><br><span class="line">        link(rel&#x3D;&#39;stylesheet&#39;, href&#x3D;item)</span><br><span class="line">    each item in theme.aplayer.js</span><br><span class="line">        script(src&#x3D;item)</span><br></pre></td></tr></table></figure><ol start="4"><li>Butterfly 主题下的<code>_config.yml</code>配置文件里添加</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##侧边栏歌单</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/APlayer/APlayer.min.js</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/APlayer/APlayer.min.css</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">5164883875</span> <span class="comment">#歌单id</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span> <span class="comment">#服务商</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span> <span class="comment"># 播放菜单</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="string">&#x27;true&#x27;</span> <span class="comment">#是否开启吸底模式，详细：https://aplayer.js.org/#/home?id=fixed-mode</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">random</span> <span class="comment"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">auto</span> <span class="comment">#预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class="line">  <span class="attr">listFolded:</span> <span class="string">&#x27;false&#x27;</span> <span class="comment">#列表默认折叠</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">true</span> <span class="comment"># 自动播放</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.1</span> <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改hosts解决github访问慢的问题</title>
      <link href="/blog/article/4855aed0.html"/>
      <url>/blog/article/4855aed0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note info">            <p>不需要安装任何程序，通过修改本地 <code>hosts</code> 文件，试图解决：</p><ul><li>GitHub 访问速度慢的问题</li><li>GitHub 项目中的图片显示不出的问题</li></ul>          </div><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-复制下面的内容"><a href="#1-复制下面的内容" class="headerlink" title="1. 复制下面的内容"></a>1. 复制下面的内容</h3><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># GitHub Host Start</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.154</span>                                   github.githubassets.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    camo.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    github.map.fastly.net</span><br><span class="line"><span class="number">199.232</span><span class="number">.69</span><span class="number">.194</span>                                    github.global.ssl.fastly.net</span><br><span class="line"><span class="number">140.82</span><span class="number">.112</span><span class="number">.3</span>                                         github.com</span><br><span class="line"><span class="number">140.82</span><span class="number">.114</span><span class="number">.5</span>                                         api.github.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    raw.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    favicons.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    avatars5.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    avatars4.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    avatars3.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    avatars2.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    avatars1.githubusercontent.com</span><br><span class="line"><span class="number">199.232</span><span class="number">.68</span><span class="number">.133</span>                                    avatars0.githubusercontent.com</span><br><span class="line"># GitHub Host <span class="keyword">End</span></span><br></pre></td></tr></table></figure><h3 id="2-修改-hosts-文件"><a href="#2-修改-hosts-文件" class="headerlink" title="2. 修改 hosts 文件"></a>2. 修改 hosts 文件</h3><p>hosts 文件在每个系统的位置不一，详情如下：</p><ul><li>Windows 系统：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux 系统：<code>/etc/hosts</code></li><li>Mac（苹果电脑）系统：<code>/etc/hosts</code></li><li>Android（安卓）系统：<code>/system/etc/hosts</code></li><li>iPhone（iOS）系统：<code>/etc/hosts</code></li></ul><p>修改方法，把第一步的内容复制到文本末尾：</p><ol><li>Windows 使用记事本打开<code>hosts</code>文件。</li><li>Linux、Mac 使用 Root 权限：<code>sudo vi /etc/hosts</code>。</li><li>iPhone、iPad 须越狱、Android 必须要 root。</li></ol><h3 id="3-激活生效"><a href="#3-激活生效" class="headerlink" title="3. 激活生效"></a>3. 激活生效</h3><p>大部分情况下是直接生效，如未生效可尝试下面的办法，刷新 DNS：</p><ol><li><p>Windows：在 CMD 窗口输入：<code>ipconfig /flushdns</code></p></li><li><p>Linux 命令：<code>sudo rcnscd restart</code></p></li><li><p>Mac 命令：<code>sudo killall -HUP mDNSResponder</code></p></li></ol><div class="note info">            <p>如果上述方法无效可以尝试重启机器。</p>          </div><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>现在试试打开 GitHub 的效果如何吧: <a class="btn-beautify button--animated blue outline" href="https://github.com/samelehub"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo标签插件</title>
      <link href="/blog/article/d87f7e0c.html"/>
      <url>/blog/article/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note info no-icon">            <p>标签外挂是 Hexo 独有的功能，并不是标准的 Markdown 格式。</p><p>以下的写法，只适用于 Butterfly 主题，用在其它主题上不会有效果，甚至可能会报错。 使用前请留意。</p>          </div><h2 id="Note-（Bootstrap-Callout）"><a href="#Note-（Bootstrap-Callout）" class="headerlink" title="Note （Bootstrap Callout）"></a>Note （Bootstrap Callout）</h2><p>配置 <code>butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>用法:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><div class="note default">            <p>default</p>          </div><div class="note primary no-icon">            <p>primary</p>          </div><div class="note success">            <p>success</p>          </div><div class="note info">            <p>info</p>          </div><div class="note warning">            <p>warning</p>          </div><div class="note danger">            <p>danger</p>          </div><h2 id="Gallery-相册"><a href="#Gallery-相册" class="headerlink" title="Gallery 相册"></a>Gallery 相册</h2><p>用法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![](https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/01.jpg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/02.jpg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/03.jpg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/04.jpg)</span><br></pre></td></tr></table></figure><p>效果：</p><div class="justified-gallery"><p><img src= "/blog/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/01.jpg" alt=""><br><img src= "/blog/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/02.jpg" alt=""><br><img src= "/blog/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/03.jpg" alt=""><br><img src= "/blog/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/samelehub/CDN@latest/images/cover/04.jpg" alt=""></p>          </div><h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><p>使用方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab [Tab caption] [@icon] --&gt;</span></span></span><br><span class="line"></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name : 没有逗号的制表符块标签的唯一名称。将在 #id 的前缀中用于每个附带有索引号的选项卡。如果名称中有空格，对于生成 #id，所有的空格将被破折号替换。只有当前的 url 的 post/page 必须是唯一的!</span><br><span class="line"></span><br><span class="line">[index] : 可选参数;活动选项卡的索引号。如果没有指定，第一个选项卡(1)将被选中。如果索引为-1，则不会选择任何选项卡。</span><br><span class="line"></span><br><span class="line">[Tab caption] : 可选参数;当前标签的标题。如果没有指定标题，则使用带有标签索引后缀的唯一名称作为标签的标题。如果没有指定标题，但指定了图标，标题将为空。</span><br><span class="line"></span><br><span class="line">[@icon] : 可选参数;FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)可指定带空格或不带空格; 如 &#x27;Tab caption @icon&#x27; 等价于 &#x27;Tab caption@icon&#x27;.</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test, 2 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab qwe--&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab asd --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab zxc --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">qwe</button></li><li class="tab active"><button type="button" data-href="#test-2">asd</button></li><li class="tab"><button type="button" data-href="#test-3">zxc</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>用法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url] : 链接</span><br><span class="line">[text] : 按钮文字</span><br><span class="line">[icon] : [可选] 图标</span><br><span class="line">[color] : [可选] 按钮背景颜色(默认 style 时); 按钮字体和边框颜色(outline 时); default/blue/pink/red/purple/orange/green</span><br><span class="line">[style] : [可选] 按钮样式 默认实心; outline/留空</span><br><span class="line">[layout] : [可选] 按钮布局 默认为 line; block/留空</span><br><span class="line">[position] : [可选] 按钮位置 前提是设置了 layout 为 block 默认为左边; center/right/留空</span><br><span class="line">[size] : [可选] 按钮大小; larger/留空</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://samele.icu&#x27;,Samele,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://samele.icu&#x27;,Samele,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://samele.icu&#x27;,Samele,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://samele.icu&#x27;,Samele,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://samele.icu&#x27;,Samele,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://samele.icu&#x27;,Samele,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://samele.icu&#x27;,Samele,far fa-hand-point-right,outline green larger %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><a class="btn-beautify button--animated outline larger" href="https://samele.icu"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a><a class="btn-beautify button--animated outline blue larger" href="https://samele.icu"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a><a class="btn-beautify button--animated outline pink larger" href="https://samele.icu"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a><a class="btn-beautify button--animated outline red larger" href="https://samele.icu"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a><a class="btn-beautify button--animated outline purple larger" href="https://samele.icu"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a><a class="btn-beautify button--animated outline orange larger" href="https://samele.icu"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a><a class="btn-beautify button--animated outline green larger" href="https://samele.icu"   title="Samele"><i class="far fa-hand-point-right fa-fw"></i><span>Samele</span></a><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><div class="note warning">            <p>请注意，tag-hide 内的标签外挂 content 内都不建议有 h1 - h6 等标题。 因为 Toc 会把隐藏内容标题也显示出来，而且当滚动屏幕时，如果隐藏内容没有显示出来，会导致 Toc 的滚动出现异常。</p>          </div><p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。 可以使用这个标签外挂。</p><div class="tabs" id="tag-hide"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tag-hide-1">inline</button></li><li class="tab"><button type="button" data-href="#tag-hide-2">Block</button></li><li class="tab"><button type="button" data-href="#tag-hide-3">Toggle</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p><code>inline</code> 在文本里面添加按钮隐藏内容，只限文字。</p><p>（content 不能包含英文逗号，可用 <code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content： 文本内容。</p></li><li><p>display： 按钮显示的文本（ 可选）</p></li><li><p>bg:按钮背景颜色（ 可选）</p></li><li><p>color： 按钮文本的颜色（ 可选）</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人？ &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案<br>  </button><span class="hide-content">西装裤(c装酷)</span></span></p><p>门里站着一个人？ <span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click<br>  </button><span class="hide-content">闪</span></span></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-2"><p><code>block</code> 独立的 block 隐藏内容，可以隐藏很多内容，包括图片，代码块等等。</p><p>（ display 不能包含英文逗号，可用。 <code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content： 文本内容。</p></li><li><p>display： 按钮显示的文本（ 可选）</p></li><li><p>bg:按钮背景颜色（ 可选）</p></li><li><p>color： 按钮文本的颜色（ 可选）</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">答案：略。</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><span class="hide-content"><p>答案：略。</p></span></div><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-3"><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p><p>（ display 不能包含英文逗号，可用。 <code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 假文 %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Necessitatibus hic animi velit quaerat voluptatum sapiente nam possimus sed minima reprehenderit ipsum debitis itaque praesentium, illo eligendi rem, numquam nulla magni.</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>假文</span></div>    <div class="hide-content"><p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Necessitatibus hic animi velit quaerat voluptatum sapiente nam possimus sed minima reprehenderit ipsum debitis itaque praesentium, illo eligendi rem, numquam nulla magni.</p></div></div><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><div class="note warning">            <p>mermaid 标签不允许嵌套于一些隐藏属性的标签外挂，例如： tag-hide 内的标签外挂和 tabs 标签外挂，这会导致 mermaid 图标无法正常显示，使用时请留意。</p><p><strong>请不要压缩 html 代码，不然会导致 mermaid 显示异常。</strong></p>          </div><p>使用 mermaid 标签可以绘制 Flowchart（流程图）、Sequence diagram（时序图）、Class Diagram（类图）、State Diagram（状态图）、Gantt（甘特图）和 Pie Chart（圆形图），具体可以查看 <a href="https://mermaid-js.github.io/mermaid/#/">mermaid 文档</a> 。</p><p>配置 <code>butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">內容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">title Key elements in Product X</span><br><span class="line">&quot;Calcium&quot; : 42.96</span><br><span class="line">&quot;Potassium&quot; : 50.05</span><br><span class="line">&quot;Magnesium&quot; : 10.01</span><br><span class="line">&quot;Iron&quot; : 5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><div class="mermaid">          pietitle Key elements in Product X"Calcium" : 42.96"Potassium" : 50.05"Magnesium" : 10.01"Iron" : 5          </div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷新jsDelivr缓存</title>
      <link href="/blog/article/824ac3d0.html"/>
      <url>/blog/article/824ac3d0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实现-手动刷新-CDN-缓存"><a href="#实现-手动刷新-CDN-缓存" class="headerlink" title="实现 手动刷新 CDN 缓存"></a>实现 手动刷新 CDN 缓存</h1><h2 id="将你的-CDN-链接中的："><a href="#将你的-CDN-链接中的：" class="headerlink" title="将你的 CDN 链接中的："></a>将你的 CDN 链接中的：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;</span><br></pre></td></tr></table></figure><h2 id="替换成："><a href="#替换成：" class="headerlink" title="替换成："></a>替换成：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;purge.jsdelivr.net&#x2F;</span><br></pre></td></tr></table></figure><h2 id="即可实时刷新"><a href="#即可实时刷新" class="headerlink" title="即可实时刷新"></a>即可实时刷新</h2>]]></content>
      
      
      <categories>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页插入b站视频</title>
      <link href="/blog/article/84cc0a92.html"/>
      <url>/blog/article/84cc0a92.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=413762343<span class="symbol">&amp;amp;</span>page=0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">border</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中，前后的 raw 标签是 Hexo 提供的安全插入 html 代码的方法。div 标签则方便做些样式定义，而避免改动所复制的嵌入代码。</p></blockquote><p>测试效果：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=413762343&amp;page=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的永久链接插件 abbrlink</title>
      <link href="/blog/article/2bcce69f.html"/>
      <url>/blog/article/2bcce69f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>hexo 的默认永久链接是在_config.yml 里的配置 permalink: :year/:month/:day/:title/。这种默认配置有个很不能接受的缺点，文件名为中文，会导致 url 链接里面出现中文。这次我来介绍一个比较方便好用的解决方案 hexo-abbrlink 插件。</p></blockquote><h2 id="安装-hexo-abbrlink-插件"><a href="#安装-hexo-abbrlink-插件" class="headerlink" title="安装 hexo-abbrlink 插件"></a>安装 hexo-abbrlink 插件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>站点配置文件(_config.yml)里:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>使用 <code>hexo g</code> 会自动在你的文章中加上 <code>abbrlink:&#39;随机字符&#39;</code></p><hr><h2 id="本文为转载"><a href="#本文为转载" class="headerlink" title="本文为转载"></a>本文为转载</h2><p>原文链接：<a href="http://www.adanblog.com/hexo/6962f19.html">http://www.adanblog.com/hexo/6962f19.html</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions自动部署Hexo博客</title>
      <link href="/blog/article/b272844b.html"/>
      <url>/blog/article/b272844b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/blog/assets/css/APlayer.min.css"><script src="/blog/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>GitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。</p></blockquote><h2 id="开始准备"><a href="#开始准备" class="headerlink" title="开始准备"></a>开始准备</h2><h3 id="配置本地和远程仓库"><a href="#配置本地和远程仓库" class="headerlink" title="配置本地和远程仓库"></a>配置本地和远程仓库</h3><p>为了方便下面步骤的进行，我们进行这样的配置：</p><ul><li>备份博客源文件</li><li>在本地仓库创建 <code>hexo</code> 分支</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆项目到本地</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/xxx/xxx.github.io.git</span><br><span class="line"><span class="comment"># 创建并切换到 hexo 分支</span></span><br><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><ul><li><p>在 <code>hexo</code> 分支保存博客项目的源代码</p><ul><li>将 <code>hexo</code> 分支下的文件除 <code>.git</code> 目录外全部删除</li><li>将博客源码文件拷贝到该目录下，并提交 <code>commit</code> 到 <code>hexo</code> 分支。</li></ul></li><li><p>将本地 <code>hexo</code> 分支内容提交到 <code>GitHub</code> 远程仓库</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码文件拷贝完后commit到 hexo 分支</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="comment"># 提交本地 hexo 分支到远程仓库的 hexo 分支</span></span><br><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure><p>现在博客源码和静态文件（即 <code>public</code> 文件夹下的内容）就存放在一个 <code>github</code> 项目中的两个独立分支中了。</p><table><thead><tr><th align="center">分支</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">hexo</td><td align="left">原始数据及配置</td></tr><tr><td align="center">master</td><td align="left">静态页面</td></tr></tbody></table><h2 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h2><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span> -N <span class="string">&quot;&quot;</span> -f deploy_key</span><br></pre></td></tr></table></figure><p>会生成 <code>deploy_key</code>私钥 和 <code>deploy_key.pub</code>公钥两个文件。</p><h3 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h3><p>项目页 –&gt; <code>Settings</code> –&gt; <code>Deploy keys</code> –&gt; <code>Add deploy key</code></p><p>将<code>deploy_key.pub</code>公钥内容复制上去，勾选：Allow write access</p><h3 id="添加加密环境变量"><a href="#添加加密环境变量" class="headerlink" title="添加加密环境变量"></a>添加加密环境变量</h3><p>项目页 –&gt; <code>Settings</code> –&gt; <code>Secrets</code> –&gt; <code>New secret</code></p><blockquote><p>环境变量名可以任意命名，但要和 Actions 里的设定$对应</p></blockquote><table><thead><tr><th align="center">环境变量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">DEPLOY_KEY</td><td align="left">发布 key 私钥，<code>deploy_key</code>私钥文件内容</td></tr><tr><td align="center">EMAIL</td><td align="left">发布用户邮箱账号</td></tr><tr><td align="center">NAME</td><td align="left">发布用户名</td></tr></tbody></table><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改<code>_config.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:samelehub/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;Github CI Auto Builder at <span class="template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss Z&#x27;) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>repo</code>链接必须使用 ssh 格式</p></blockquote><h2 id="编写-Action-脚本"><a href="#编写-Action-脚本" class="headerlink" title="编写 Action 脚本"></a>编写 Action 脚本</h2><blockquote><p>此处使用<a href="https://github.com/yrpang/github-actions-hexo">成熟方案</a></p></blockquote><p>在根目录下创建 <code>GitHub Actions workflow</code> 文件，<code>.github/workflows/hexo.yml</code> 然后复制下面代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">CICD</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="comment"># 监视 `hexo`分支</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">&quot;!contains(github.event.head_commit.message, &#x27;[ci skip]&#x27;)&quot;</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">yrpang/github-actions-hexo@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploykey:</span> <span class="string">$&#123;&#123;secrets.DEPLOY_KEY&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;secrets.NAME&#125;&#125;</span></span><br><span class="line">          <span class="attr">email:</span> <span class="string">$&#123;&#123;secrets.EMAIL&#125;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><ol><li>根目录下<code>.gitignore</code>中需要移除<code>package-lock.json</code></li><li>静态页面是强制推送，覆盖历史数据</li></ol></blockquote><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>经过以上步骤的配置，发布博客的命令就变更为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 hexo 分支</span></span><br><span class="line">git checkout hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交新博文</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Publish new post.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这样，在每次我们将博客的源文件通过 git 推送到 GitHub 的 hexo 分支上后，<code>GitHub Actions</code> 就会自动检测并主动开始构建我们的博客静态文件，并自动部署到 GitHub Pages 中。</p><p><code>GitHub Actions</code>将自动监视<code>hexo</code>分支，并对任何除带<code>[ci skip]</code>的 push 触发执行。</p><p>并且除了方便部署，我们同时还在 <code>GitHub</code> 上面成功开启了我们博客源代码的备份，一箭双雕。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/yrpang/github-actions-hexo">https://github.com/yrpang/github-actions-hexo</a></li><li><a href="https://hdj.me/github-actions-hexo-cicd/">https://hdj.me/github-actions-hexo-cicd/</a></li><li><a href="https://github.com/maboloshi/Blog">https://github.com/maboloshi/Blog</a></li><li><a href="https://easyhexo.com/">https://easyhexo.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
